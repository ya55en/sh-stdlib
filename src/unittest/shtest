#! /bin/sh

#: Test modules runner
#: Parse a test module collecting `test_*` methods, also `setup_mod`,
#: `teardown_mod`, `setup` and `teardown`. Source the module and
#: execute all collected methods in proper order.

. "$POSIXSH_STDLIB_HOME/sys.sh"

import logging
import string

_sht_name_='shtest'

# shellcheck disable=2120
print_pass() {
    passmsg="${1:-passed}"
    printf 'ok %u - %s: %s\n' $no $_curr_test_ "${C_OK}${passmsg}${C_OFF}"
}

parse_module() {
    local filename="$1"
    local IFS_OLD="$IFS"
    IFS=''

    while read -r line; do
        # TODO: use 'import string' when ready, for stripping lines

        case $line in
        test_*\(*\)*\{)
            # printf 'TEST METHOD: %s\n' "${line%(*}"
            test_methods="$test_methods ${line%(*}"
            ;;

        setup_mod\(*\)*\{)
            # printf 'SETUP MOD METHOD: %s\n' "${line%(*}"
            setup_mod_name="${line%(*}"
            ;;

        teardown_mod\(*\)*\{)
            # printf 'TEARDOWN MOD METHOD: %s\n' "${line%(*}"
            teardown_mod_name="${line%(*}"
            ;;

        setup\(*\)*\{)
            # printf 'SETUP METHOD: %s\n' "${line%(*}"
            setup_name="${line%(*}"
            ;;

        teardown\(*\)*\{)
            # printf 'TEARDOWN METHOD: %s\n' "${line%(*}"
            teardown_name="${line%(*}"
            ;;

        esac

    done < "$filename"
    IFS="$IFS_OLD"
    if [ -n "$single_method" ]; then

        case $test_methods in
        *$single_method*)
            test_methods="$single_method"
            ;;
        *)
            _warn "Test method $single_method NOT found in $_mod_path_"
            ;;
        esac
    fi
}

run() {

    local setup_mod_name=
    local teardown_mod_name=
    local setup_name=
    local teardown_name=
    local test_methods=

    local _curr_test_=
    local _mod_path_=
    local _curr_test_rc_

    _mod_path_="$1"
    parse_module "$_mod_path_"
    . "$_mod_path_"

    [ -n "$setup_mod_name" ] && $setup_mod_name

    local IFS_OLD="$IFS"
    IFS=' '

    for method in $test_methods; do
        [ -n "$setup_name" ] && $setup_name

        _curr_test_=$method
        _curr_test_rc_=0
        no=$(expr $no + 1)

        $method

        if [ "$_curr_test_rc_" -eq 0 ]; then
            print_pass
        else
            # YD: attempt to count the failed tests and finally
            # return false if non-zero -- does NOT work (yet).
            failed_tests=$(( $failed_tests + 1))
        fi

        [ -n "$teardown_name" ] && $teardown_name
    done
    IFS="$IFS_OLD"

    [ -n "$teardown_mod_name" ] && $teardown_mod_name
}

run_many() {
    local no=0
    local IFS_OLD="$IFS"
    IFS=':'

    while [ -n "$test_modules" ]; do

        read -r mod_path test_modules << EOS
$test_modules
EOS

        [ -n "$mod_path" ] && {
            _debug "RUNNING module [$mod_path]"
            run "$mod_path"
        }
    done
    IFS="$IFS_OLD"
}

collect() {

    collect_if_name_matches() {
        filename="$1"
        [ -e "$filename" ] || die 33 "Path NOT found: $filename"

        _debug "Called:  collect_if_name_matches $filename"

        # YD: a workaround for suppressing `shtest` own tests run by
        # `make-shtest-endtest.sh`, some of which fail intentionally.
        if [ "$skip_samples" = YES ] && contains "$filename" '/shtest-samples/'; then
            _debug "Module excluded, so skipped: $filename"
            return
        fi

        case "$(basename "$filename")" in
        test-*.sh | test_*.sh)
            test_modules="$test_modules:$filename"
            ;;
        esac
    }

    scan_directory() {
        path="$1"

        # YD: a workaround for suppressing `shtest` own tests run by
        # `make-shtest-endtest.sh`, some of which fail intentionally.
        if [ "$skip_samples" = YES ] && contains "$path" '/shtest-samples/'; then
            _debug "Directory excluded, so skipped: $path"
            return
        fi

        _debug "Called:  scan_directory $path"

        # guard against breaking on no glob match below for empty directories
        [ -z "$(ls $path/* 2> /dev/null)" ] && return 0

        for entry in $path/*; do
            if [ -d "$entry" ]; then
                scan_directory "$entry"
            else
                collect_if_name_matches "$entry"
            fi
        done
    }

    local OLD_IFS="$IFS"
    IFS=':'
    local modules_list="$modules"
    local path
    while [ -n "$modules_list" ]; do
        read -r path modules_list << EOS
$modules_list
EOS
        if [ -z "$path" ]; then
            continue
        fi
        _debug "About to scan or collect: path=$path"
        if [ -d "$path" ]; then
            scan_directory "$path"
        else
            collect_if_name_matches "$path"
        fi
    done

    _debug "COLLECTED: $test_modules"
    IFS="$OLD_IFS"
}

main() {
    local test_modules

    case "$1" in
    --help | -help | help | -h)
        cat << EOS
Unit test runner v 0.0.0 ;)
USAGE:
  $ $(basename "$0") TEST-MODULE [TEST-MODULE ...] [-t TEST-CASE] [--with-samples]

EOS
        exit 0
        ;;
    esac

    local is_testcase=0
    local single_method=
    local modules=
    local failed_tests=0

    # should skip sample test modules in shtest-samples/ by default:
    local skip_samples=YES

    for ARG in "$@"; do
        if [ "$is_testcase" = 1 ]; then
            single_method="$ARG" # TODO: Support multiple testcases
            is_testcase=0

        elif [ "$ARG" = "--with-samples" ]; then
            skip_samples=NO

        elif [ "$ARG" = "-t" ]; then
            is_testcase=1

        elif expr "$ARG" : '-[^t]' > /dev/null; then
            cat << EOS
Unknown flag: $ARG
USAGE:
  $ $(basename "$0") TEST-MODULE [TEST-MODULE ...] [-t TEST-CASE] [--with-samples]

EOS
            exit 1

        else
            modules="$modules:$ARG"
        fi
    done

    local test_modules
    collect "$modules"
    run_many
    # failed_tests NOT (yet) used -- see comment in run()
    # return "$failed_tests"
}

_debug "_name_=[$_name_]  _sht_name_=[$_sht_name_]"
if [ "$_name_" = "$_sht_name_" ]; then
    main "$@"
fi
